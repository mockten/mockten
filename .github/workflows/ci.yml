name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  notify-slack-pr:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
    - name: Notify Slack
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"Pull Request: '${GITHUB_REPOSITORY}' # '${github.event.pull_request.number}'"}' ${{ secrets.SLACK_WEBHOOK }}
        
  notify-slack-push:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
    - name: Notify Slack
      run: |
        curl -X POST -H 'Content-type: application/json' --data '{"text":"Pull Requestがマージされました: '${GITHUB_REPOSITORY}' # '${github.event.pull_request.number}'"}' ${{ secrets.SLACK_WEBHOOK }}
  build_ecfront:
    runs-on: ubuntu-22.04
    if: contains(github.event.head_commit.modified, 'ecfront/')
    defaults:
      run:
        working-directory: ecfront
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Build
      run: go build -v .

   # - name: Test
   #  run: go test -v .

  push_snapshot_container_ecfront:
    needs: [build_ecfront]
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ecfront
    env:
      MAJOR_VERSION: 0
      MINOR_VERSION: 0
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v1
    - name: GCP Authenticate
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup GCloud
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        version: '>= 363.0.0'

    - name: Configure docker to use the gcloud cli
      run: gcloud auth configure-docker --quiet

    - name: Get latest version
      id: get-latest-version
      run: |
        export LATEST_VERSION=$(gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/ecfront --format='get(tags)' --limit=1)
        echo "::set-output name=latest_version::$LATEST_VERSION"

    - name: Increment patch version
      id: increment-patch-version
      run: |
        version=${{ steps.get-latest-version.outputs.latest_version }}
        if [ -z "$version" ]; then
          echo "Error: No version number provided."
          exit 1
        fi
        patch_version_exist=$(echo $version | awk -F. '{print $NF}')
        export PATCH_VERSION=$(($patch_version_exist + 1))
        echo "::set-output name=patch_version::$PATCH_VERSION"

    - name: Build and push container
      run: |
        export IMAGE_TAG="gcr.io/${{ secrets.GCP_PROJECT_ID }}/ecfront:v$MAJOR_VERSION.$MINOR_VERSION.${{ steps.increment-patch-version.outputs.patch_version }}"
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG


  build_ecpay:
    runs-on: ubuntu-22.04
    if: contains(github.event.head_commit.modified, 'ecpay/')
    defaults:
      run:
        working-directory: ecpay
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Build
      run: go build -v .

    # - name: Test
    #  run: go test -v .


  push_snapshot_container_ecpay:
    needs: [build_ecpay]
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ecpay
    env:
      MAJOR_VERSION: 0
      MINOR_VERSION: 0
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v1
    - name: GCP Authenticate
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup GCloud
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        version: '>= 363.0.0'

    - name: Configure docker to use the gcloud cli
      run: gcloud auth configure-docker --quiet

    - name: Get latest version
      id: get-latest-version
      run: |
        export LATEST_VERSION=$(gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/ecpay --format='get(tags)' --limit=1)
        echo "::set-output name=latest_version::$LATEST_VERSION"

    - name: Increment patch version
      id: increment-patch-version
      run: |
        version=${{ steps.get-latest-version.outputs.latest_version }}
        if [ -z "$version" ]; then
          echo "Error: No version number provided."
          exit 1
        fi
        patch_version_exist=$(echo $version | awk -F. '{print $NF}')
        export PATCH_VERSION=$(($patch_version_exist + 1))
        echo "::set-output name=patch_version::$PATCH_VERSION"

    - name: Build and push container
      run: |
        export IMAGE_TAG="gcr.io/${{ secrets.GCP_PROJECT_ID }}/ecpay:v$MAJOR_VERSION.$MINOR_VERSION.${{ steps.increment-patch-version.outputs.patch_version }}"
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG


  build_notification:
    runs-on: ubuntu-22.04
    if: contains(github.event.head_commit.modified, 'notification/')
    defaults:
      run:
        working-directory: notification
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Build
      run: go build -v .

    # - name: Test
    #  run: go test -v .


  push_snapshot_container_notification:
    needs: [build_notification]
    if: ${{ github.event_name == 'push'  || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: notification
    env:
      MAJOR_VERSION: 0
      MINOR_VERSION: 0
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v1
    - name: GCP Authenticate
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup GCloud
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        version: '>= 363.0.0'

    - name: Configure docker to use the gcloud cli
      run: gcloud auth configure-docker --quiet

    - name: Get latest version
      id: get-latest-version
      run: |
        export LATEST_VERSION=$(gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/notification --format='get(tags)' --limit=1)
        echo "::set-output name=latest_version::$LATEST_VERSION"

    - name: Increment patch version
      id: increment-patch-version
      run: |
        version=${{ steps.get-latest-version.outputs.latest_version }}
        if [ -z "$version" ]; then
          echo "Error: No version number provided."
          exit 1
        fi
        patch_version_exist=$(echo $version | awk -F. '{print $NF}')
        export PATCH_VERSION=$(($patch_version_exist + 1))
        echo "::set-output name=patch_version::$PATCH_VERSION"

    - name: Build and push container
      run: |
        export IMAGE_TAG="gcr.io/${{ secrets.GCP_PROJECT_ID }}/notification:v$MAJOR_VERSION.$MINOR_VERSION.${{ steps.increment-patch-version.outputs.patch_version }}"
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG

  build_payexecution:
    runs-on: ubuntu-22.04
    if: contains(github.event.head_commit.modified, 'payexecution/')
    defaults:
      run:
        working-directory: payexecution
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Build
      run: go build -v .

    - name: Test
      run: go test -v .

  push_snapshot_container_payexecution:
    needs: [build_payexecution]
    if: ${{ github.event_name == 'push'  || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: payexecution
    env:
      MAJOR_VERSION: 0
      MINOR_VERSION: 0
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v1
    - name: GCP Authenticate
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup GCloud
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        version: '>= 363.0.0'

    - name: Configure docker to use the gcloud cli
      run: gcloud auth configure-docker --quiet

    - name: Get latest version
      id: get-latest-version
      run: |
        export LATEST_VERSION=$(gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/payexecution --format='get(tags)' --limit=1)
        echo "::set-output name=latest_version::$LATEST_VERSION"

    - name: Increment patch version
      id: increment-patch-version
      run: |
        version=${{ steps.get-latest-version.outputs.latest_version }}
        if [ -z "$version" ]; then
          echo "Error: No version number provided."
          exit 1
        fi
        patch_version_exist=$(echo $version | awk -F. '{print $NF}')
        export PATCH_VERSION=$(($patch_version_exist + 1))
        echo "::set-output name=patch_version::$PATCH_VERSION"

    - name: Build and push container
      run: |
        export IMAGE_TAG="gcr.io/${{ secrets.GCP_PROJECT_ID }}/payexecution:v$MAJOR_VERSION.$MINOR_VERSION.${{ steps.increment-patch-version.outputs.patch_version }}"
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG

  build_ranking:
    runs-on: ubuntu-22.04
    if: contains(github.event.head_commit.modified, 'ranking/')
    defaults:
      run:
        working-directory: ranking
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Build
      run: go build -v .

    # - name: Test
    #  run: go test -v .

  push_snapshot_container_ranking:
    needs: [build_ranking]
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ranking
    env:
      MAJOR_VERSION: 0
      MINOR_VERSION: 0

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v1
    - name: GCP Authenticate
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup GCloud
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        version: '>= 363.0.0'

    - name: Configure docker to use the gcloud cli
      run: gcloud auth configure-docker --quiet

    - name: Get latest version
      id: get-latest-version
      run: |
        export LATEST_VERSION=$(gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/ranking --format='get(tags)' --limit=1)
        echo "::set-output name=latest_version::$LATEST_VERSION"

    - name: Increment patch version
      id: increment-patch-version
      run: |
        version=${{ steps.get-latest-version.outputs.latest_version }}
        if [ -z "$version" ]; then
          echo "Error: No version number provided."
          exit 1
        fi
        patch_version_exist=$(echo $version | awk -F. '{print $NF}')
        export PATCH_VERSION=$(($patch_version_exist + 1))
        echo "::set-output name=patch_version::$PATCH_VERSION"

    - name: Build and push container
      run: |
        export IMAGE_TAG="gcr.io/${{ secrets.GCP_PROJECT_ID }}/ranking:v$MAJOR_VERSION.$MINOR_VERSION.${{ steps.increment-patch-version.outputs.patch_version }}"
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG


  build_searchitem:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'searchitem/')
    defaults:
      run:
        working-directory: searchitem
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.21

    - name: Build
      run: go build -v .

    # - name: Test
    #  run: go test -v .

  push_snapshot_container_searchitem:
    needs: [build_searchitem]
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: searchitem
    env:
      MAJOR_VERSION: 0
      MINOR_VERSION: 0
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v1
    - name: GCP Authenticate
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup GCloud
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        version: '>= 363.0.0'

    - name: Configure docker to use the gcloud cli
      run: gcloud auth configure-docker --quiet

    - name: Get latest version
      id: get-latest-version
      run: |
        export LATEST_VERSION=$(gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/searchitem --format='get(tags)' --limit=1)
        echo "::set-output name=latest_version::$LATEST_VERSION"

    - name: Increment patch version
      id: increment-patch-version
      run: |
        version=${{ steps.get-latest-version.outputs.latest_version }}
        if [ -z "$version" ]; then
          echo "Error: No version number provided."
          exit 1
        fi
        patch_version_exist=$(echo $version | awk -F. '{print $NF}')
        export PATCH_VERSION=$(($patch_version_exist + 1))
        echo "::set-output name=patch_version::$PATCH_VERSION"

    - name: Build and push container
      run: |
        export IMAGE_TAG="gcr.io/${{ secrets.GCP_PROJECT_ID }}/searchitem:v$MAJOR_VERSION.$MINOR_VERSION.${{ steps.increment-patch-version.outputs.patch_version }}"
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG

  push_snapshot_container_staticfile:
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.modified, 'static-file/')}}
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: static-file
    env:
      MAJOR_VERSION: 0
      MINOR_VERSION: 0

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v1
    - name: GCP Authenticate
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup GCloud
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        version: '>= 363.0.0'

    - name: Configure docker to use the gcloud cli
      run: gcloud auth configure-docker --quiet

    - name: Get latest version
      id: get-latest-version
      run: |
        export LATEST_VERSION=$(gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/static-file --format='get(tags)' --limit=1)
        echo "::set-output name=latest_version::$LATEST_VERSION"

    - name: Increment patch version
      id: increment-patch-version
      run: |
        version=${{ steps.get-latest-version.outputs.latest_version }}
        if [ -z "$version" ]; then
          echo "Error: No version number provided."
          exit 1
        fi
        patch_version_exist=$(echo $version | awk -F. '{print $NF}')
        export PATCH_VERSION=$(($patch_version_exist + 1))
        echo "::set-output name=patch_version::$PATCH_VERSION"

    - name: Build and push container
      run: |
        export IMAGE_TAG="gcr.io/${{ secrets.GCP_PROJECT_ID }}/static-file:v$MAJOR_VERSION.$MINOR_VERSION.${{ steps.increment-patch-version.outputs.patch_version }}"
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG

  push_snapshot_container_mongo:
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch'|| contains(github.event.head_commit.modified, 'mongo/')}}
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: mongo
    env:
      MAJOR_VERSION: 0
      MINOR_VERSION: 0

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v1
    - name: GCP Authenticate
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup GCloud
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        version: '>= 363.0.0'

    - name: Configure docker to use the gcloud cli
      run: gcloud auth configure-docker --quiet

    - name: Get latest version
      id: get-latest-version
      run: |
        export LATEST_VERSION=$(gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/mongo --format='get(tags)' --limit=1)
        echo "::set-output name=latest_version::$LATEST_VERSION"

    - name: Increment patch version
      id: increment-patch-version
      run: |
        version=${{ steps.get-latest-version.outputs.latest_version }}
        if [ -z "$version" ]; then
          echo "Error: No version number provided."
          exit 1
        fi
        patch_version_exist=$(echo $version | awk -F. '{print $NF}')
        export PATCH_VERSION=$(($patch_version_exist + 1))
        echo "::set-output name=patch_version::$PATCH_VERSION"

    - name: Build and push container
      run: |
        export IMAGE_TAG="gcr.io/${{ secrets.GCP_PROJECT_ID }}/mongo:v$MAJOR_VERSION.$MINOR_VERSION.${{ steps.increment-patch-version.outputs.patch_version }}"
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG

  push_snapshot_container_meilisearch:
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.modified, 'meilisearch/')}}
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: meilisearch
    env:
      MAJOR_VERSION: 0
      MINOR_VERSION: 0

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v1
    - name: GCP Authenticate
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup GCloud
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        version: '>= 363.0.0'

    - name: Configure docker to use the gcloud cli
      run: gcloud auth configure-docker --quiet

    - name: Get latest version
      id: get-latest-version
      run: |
        export LATEST_VERSION=$(gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/meilisearch --format='get(tags)' --limit=1)
        echo "::set-output name=latest_version::$LATEST_VERSION"

    - name: Increment patch version
      id: increment-patch-version
      run: |
        version=${{ steps.get-latest-version.outputs.latest_version }}
        if [ -z "$version" ]; then
          echo "Error: No version number provided."
          exit 1
        fi
        patch_version_exist=$(echo $version | awk -F. '{print $NF}')
        export PATCH_VERSION=$(($patch_version_exist + 1))
        echo "::set-output name=patch_version::$PATCH_VERSION"

    - name: Build and push container
      run: |
        export IMAGE_TAG="gcr.io/${{ secrets.GCP_PROJECT_ID }}/meilisearch:v$MAJOR_VERSION.$MINOR_VERSION.${{ steps.increment-patch-version.outputs.patch_version }}"
        docker build -t $IMAGE_TAG .
        docker push $IMAGE_TAG